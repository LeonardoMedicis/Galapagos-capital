#!/usr/bin/env python3
"""
Classe base para todos os m√≥dulos de concilia√ß√£o.

Esta classe fornece a estrutura padr√£o que todos os m√≥dulos de concilia√ß√£o
devem seguir, garantindo consist√™ncia e facilitando a integra√ß√£o com o
mapa central de controle.
"""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Any, Optional, List
import logging
import json
import os
from pathlib import Path


class BaseConciliacao(ABC):
    """
    Classe base abstrata para todos os m√≥dulos de concilia√ß√£o.
    
    Attributes:
        nome (str): Nome √∫nico do m√≥dulo de concilia√ß√£o
        categoria (str): Categoria da concilia√ß√£o (rentabilidade, impostos, outras)
        criticidade (str): N√≠vel de criticidade (critica, alta, media)
        logger (logging.Logger): Logger espec√≠fico do m√≥dulo
        config (dict): Configura√ß√µes espec√≠ficas do m√≥dulo
    """
    
    def __init__(self, nome: str, categoria: str, criticidade: str):
        """
        Inicializa a classe base de concilia√ß√£o.
        
        Args:
            nome: Nome √∫nico do m√≥dulo
            categoria: Categoria da concilia√ß√£o
            criticidade: N√≠vel de criticidade
        """
        self.nome = nome
        self.categoria = categoria
        self.criticidade = criticidade
        self.logger = self._configurar_logger()
        self.config = self._carregar_configuracao()
        
        self.logger.info(f"üöÄ Inicializando m√≥dulo: {self.nome}")
    
    def _configurar_logger(self) -> logging.Logger:
        """
        Configura logger espec√≠fico para o m√≥dulo.
        
        Returns:
            Logger configurado
        """
        logger = logging.getLogger(f"conciliacao.{self.nome}")
        
        if not logger.handlers:
            # Configurar handler para arquivo
            log_dir = Path("logs")
            log_dir.mkdir(exist_ok=True)
            
            file_handler = logging.FileHandler(
                log_dir / f"{self.nome}.log",
                encoding='utf-8'
            )
            
            # Configurar handler para console
            console_handler = logging.StreamHandler()
            
            # Configurar formato
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            
            file_handler.setFormatter(formatter)
            console_handler.setFormatter(formatter)
            
            logger.addHandler(file_handler)
            logger.addHandler(console_handler)
            logger.setLevel(logging.INFO)
        
        return logger
    
    def _carregar_configuracao(self) -> Dict[str, Any]:
        """
        Carrega configura√ß√µes espec√≠ficas do m√≥dulo.
        
        Returns:
            Dicion√°rio com configura√ß√µes
        """
        config_path = Path("config.json")
        
        if config_path.exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                self.logger.info(f"‚úÖ Configura√ß√£o carregada: {config_path}")
                return config
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Erro ao carregar configura√ß√£o: {e}")
                return self._configuracao_padrao()
        else:
            self.logger.info("üìã Usando configura√ß√£o padr√£o")
            return self._configuracao_padrao()
    
    def _configuracao_padrao(self) -> Dict[str, Any]:
        """
        Retorna configura√ß√£o padr√£o para o m√≥dulo.
        
        Returns:
            Configura√ß√£o padr√£o
        """
        return {
            "modulo": {
                "nome": self.nome,
                "categoria": self.categoria,
                "criticidade": self.criticidade,
                "versao": "1.0.0"
            },
            "execucao": {
                "timeout": 300,
                "retry_attempts": 3,
                "retry_delay": 5
            },
            "validacoes": {
                "tolerancia_percentual": 0.01,
                "verificar_duplicatas": True,
                "validar_datas": True
            },
            "saida": {
                "gerar_relatorio": True,
                "salvar_historico": True,
                "reportar_status_central": True
            }
        }
    
    @abstractmethod
    def executar_conciliacao(self, data_referencia: Optional[str] = None) -> Dict[str, Any]:
        """
        M√©todo abstrato para executar a concilia√ß√£o espec√≠fica.
        
        Args:
            data_referencia: Data de refer√™ncia no formato YYYY-MM-DD
            
        Returns:
            Dicion√°rio com resultados da concilia√ß√£o
            
        Raises:
            NotImplementedError: Se n√£o implementado na classe filha
        """
        pass
    
    @abstractmethod
    def _carregar_dados(self, data_referencia: str) -> Dict[str, Any]:
        """
        M√©todo abstrato para carregar dados espec√≠ficos do m√≥dulo.
        
        Args:
            data_referencia: Data de refer√™ncia
            
        Returns:
            Dados carregados
        """
        pass
    
    @abstractmethod
    def _executar_validacoes(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo abstrato para executar valida√ß√µes espec√≠ficas.
        
        Args:
            dados: Dados a serem validados
            
        Returns:
            Resultados das valida√ß√µes
        """
        pass
    
    def _gerar_relatorio(self, resultados: Dict[str, Any]) -> str:
        """
        Gera relat√≥rio padr√£o dos resultados.
        
        Args:
            resultados: Resultados da concilia√ß√£o
            
        Returns:
            Caminho do arquivo de relat√≥rio gerado
        """
        try:
            # Criar diret√≥rio de relat√≥rios
            relatorio_dir = Path("relatorios")
            relatorio_dir.mkdir(exist_ok=True)
            
            # Nome do arquivo com timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            arquivo_relatorio = relatorio_dir / f"{self.nome}_{timestamp}.json"
            
            # Dados do relat√≥rio
            relatorio_data = {
                "modulo": self.nome,
                "categoria": self.categoria,
                "criticidade": self.criticidade,
                "timestamp_execucao": datetime.now().isoformat(),
                "resultados": resultados,
                "configuracao": self.config
            }
            
            # Salvar relat√≥rio
            with open(arquivo_relatorio, 'w', encoding='utf-8') as f:
                json.dump(relatorio_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üìÑ Relat√≥rio gerado: {arquivo_relatorio}")
            return str(arquivo_relatorio)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao gerar relat√≥rio: {e}")
            raise
    
    def _validar_data_referencia(self, data_referencia: Optional[str]) -> str:
        """
        Valida e formata data de refer√™ncia.
        
        Args:
            data_referencia: Data no formato YYYY-MM-DD ou None
            
        Returns:
            Data formatada
            
        Raises:
            ValueError: Se data estiver em formato inv√°lido
        """
        if data_referencia is None:
            data_referencia = datetime.now().strftime("%Y-%m-%d")
            self.logger.info(f"üìÖ Usando data atual: {data_referencia}")
        else:
            try:
                # Validar formato da data
                datetime.strptime(data_referencia, "%Y-%m-%d")
                self.logger.info(f"üìÖ Data de refer√™ncia: {data_referencia}")
            except ValueError:
                raise ValueError(f"Formato de data inv√°lido: {data_referencia}. Use YYYY-MM-DD")
        
        return data_referencia
    
    def _salvar_historico(self, resultados: Dict[str, Any]) -> None:
        """
        Salva hist√≥rico da execu√ß√£o.
        
        Args:
            resultados: Resultados da execu√ß√£o
        """
        try:
            # Criar diret√≥rio de hist√≥rico
            historico_dir = Path("dados/historico")
            historico_dir.mkdir(parents=True, exist_ok=True)
            
            # Nome do arquivo com data
            data_execucao = datetime.now().strftime("%Y%m%d")
            arquivo_historico = historico_dir / f"{self.nome}_{data_execucao}.json"
            
            # Dados do hist√≥rico
            historico_data = {
                "modulo": self.nome,
                "timestamp": datetime.now().isoformat(),
                "resultados": resultados
            }
            
            # Salvar hist√≥rico
            with open(arquivo_historico, 'w', encoding='utf-8') as f:
                json.dump(historico_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üíæ Hist√≥rico salvo: {arquivo_historico}")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erro ao salvar hist√≥rico: {e}")
    
    def obter_status(self) -> Dict[str, Any]:
        """
        Retorna status atual do m√≥dulo.
        
        Returns:
            Dicion√°rio com status do m√≥dulo
        """
        return {
            "nome": self.nome,
            "categoria": self.categoria,
            "criticidade": self.criticidade,
            "status": "pronto",
            "ultima_execucao": None,
            "configuracao": self.config.get("modulo", {})
        }
    
    def validar_pre_requisitos(self) -> bool:
        """
        Valida se todos os pr√©-requisitos est√£o atendidos.
        
        Returns:
            True se todos os pr√©-requisitos est√£o OK
        """
        try:
            # Verificar configura√ß√£o
            if not self.config:
                self.logger.error("‚ùå Configura√ß√£o n√£o carregada")
                return False
            
            # Verificar diret√≥rios necess√°rios
            diretorios = ["dados", "logs", "relatorios"]
            for diretorio in diretorios:
                Path(diretorio).mkdir(exist_ok=True)
            
            self.logger.info("‚úÖ Pr√©-requisitos validados")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na valida√ß√£o de pr√©-requisitos: {e}")
            return False


class ConciliacaoTemplate(BaseConciliacao):
    """
    Template de exemplo para implementa√ß√£o de novos m√≥dulos.
    
    Esta classe serve como exemplo de como implementar um novo m√≥dulo
    de concilia√ß√£o seguindo os padr√µes estabelecidos.
    """
    
    def __init__(self, nome: str, categoria: str, criticidade: str):
        super().__init__(nome, categoria, criticidade)
    
    def executar_conciliacao(self, data_referencia: Optional[str] = None) -> Dict[str, Any]:
        """
        Implementa√ß√£o exemplo de execu√ß√£o de concilia√ß√£o.
        
        Args:
            data_referencia: Data de refer√™ncia
            
        Returns:
            Resultados da concilia√ß√£o
        """
        try:
            # 1. Validar pr√©-requisitos
            if not self.validar_pre_requisitos():
                raise RuntimeError("Pr√©-requisitos n√£o atendidos")
            
            # 2. Validar data de refer√™ncia
            data_ref = self._validar_data_referencia(data_referencia)
            
            # 3. Carregar dados
            self.logger.info("üìä Carregando dados...")
            dados = self._carregar_dados(data_ref)
            
            # 4. Executar valida√ß√µes
            self.logger.info("üîç Executando valida√ß√µes...")
            resultados = self._executar_validacoes(dados)
            
            # 5. Gerar relat√≥rio
            if self.config.get("saida", {}).get("gerar_relatorio", True):
                self.logger.info("üìÑ Gerando relat√≥rio...")
                self._gerar_relatorio(resultados)
            
            # 6. Salvar hist√≥rico
            if self.config.get("saida", {}).get("salvar_historico", True):
                self._salvar_historico(resultados)
            
            self.logger.info("‚úÖ Concilia√ß√£o executada com sucesso")
            return resultados
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na execu√ß√£o: {e}")
            raise
    
    def _carregar_dados(self, data_referencia: str) -> Dict[str, Any]:
        """
        Implementa√ß√£o exemplo de carregamento de dados.
        
        Args:
            data_referencia: Data de refer√™ncia
            
        Returns:
            Dados carregados
        """
        # TODO: Implementar carregamento espec√≠fico
        self.logger.info(f"üìÅ Carregando dados para {data_referencia}")
        
        # Exemplo de estrutura de dados
        return {
            "data_referencia": data_referencia,
            "registros": [],
            "metadados": {
                "total_registros": 0,
                "fonte": "sistema_exemplo"
            }
        }
    
    def _executar_validacoes(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """
        Implementa√ß√£o exemplo de valida√ß√µes.
        
        Args:
            dados: Dados a serem validados
            
        Returns:
            Resultados das valida√ß√µes
        """
        # TODO: Implementar valida√ß√µes espec√≠ficas
        self.logger.info("üîç Executando valida√ß√µes b√°sicas")
        
        # Exemplo de estrutura de resultados
        return {
            "status": "sucesso",
            "total_registros": dados.get("metadados", {}).get("total_registros", 0),
            "registros_validos": 0,
            "registros_invalidos": 0,
            "erros": [],
            "alertas": [],
            "metricas": {
                "tempo_execucao": 0,
                "taxa_sucesso": 100.0
            }
        }

