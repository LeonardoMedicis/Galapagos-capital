#!/usr/bin/env python3
"""
Sistema de Verifica√ß√£o de Concilia√ß√µes Cont√°beis - Galapagos DTVM

Este script verifica a exist√™ncia de arquivos de concilia√ß√£o em diret√≥rios espec√≠ficos
e gera relat√≥rios detalhados em formato JSON e HTML.

Uso:
    python conciliacao_checker.py                    # Data atual
    python conciliacao_checker.py --data 2025-06-07  # Data espec√≠fica
    python conciliacao_checker.py --verbose          # Logs detalhados
    python conciliacao_checker.py --dry-run          # Simula√ß√£o sem gerar arquivos
"""

import json
import os
import logging
import argparse
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import sys

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('conciliacao_checker.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class ConciliacaoChecker:
    """
    Classe principal para verifica√ß√£o de concilia√ß√µes cont√°beis.
    
    Attributes:
        config (dict): Configura√ß√µes carregadas do arquivo config.json
        data_referencia (datetime): Data de refer√™ncia para verifica√ß√£o
        dry_run (bool): Se True, n√£o gera arquivos de sa√≠da
    """
    
    def __init__(self, config_path: str = "config.json", dry_run: bool = False):
        """
        Inicializa o verificador de concilia√ß√µes.
        
        Args:
            config_path (str): Caminho para o arquivo de configura√ß√£o
            dry_run (bool): Se True, executa em modo simula√ß√£o
        """
        self.config = self._carregar_configuracao(config_path)
        self.dry_run = dry_run
        self.data_referencia = datetime.now()
        
        logger.info(f"üöÄ Iniciando ConciliacaoChecker (dry_run={dry_run})")
        logger.info(f"üìÖ Data de refer√™ncia: {self.data_referencia.strftime('%Y-%m-%d')}")
    
    def _carregar_configuracao(self, config_path: str) -> Dict[str, Any]:
        """
        Carrega configura√ß√µes do arquivo JSON.
        
        Args:
            config_path (str): Caminho para o arquivo de configura√ß√£o
            
        Returns:
            dict: Configura√ß√µes carregadas
            
        Raises:
            FileNotFoundError: Se arquivo de configura√ß√£o n√£o existir
            json.JSONDecodeError: Se arquivo JSON for inv√°lido
        """
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            logger.info(f"‚úÖ Configura√ß√£o carregada de: {config_path}")
            return config
        except FileNotFoundError:
            logger.error(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {config_path}")
            raise
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Erro ao decodificar JSON: {e}")
            raise
    
    def definir_data_referencia(self, data: Optional[str] = None) -> None:
        """
        Define a data de refer√™ncia para verifica√ß√£o.
        
        Args:
            data (str, optional): Data no formato YYYY-MM-DD. Se None, usa data atual.
        """
        if data:
            try:
                self.data_referencia = datetime.strptime(data, '%Y-%m-%d')
                logger.info(f"üìÖ Data de refer√™ncia definida: {data}")
            except ValueError:
                logger.error(f"‚ùå Formato de data inv√°lido: {data}. Use YYYY-MM-DD")
                raise
        else:
            self.data_referencia = datetime.now()
            logger.info(f"üìÖ Usando data atual: {self.data_referencia.strftime('%Y-%m-%d')}")
    
    def _formatar_nome_arquivo(self, template: str) -> str:
        """
        Formata o nome do arquivo substituindo placeholders pela data.
        
        Args:
            template (str): Template do nome do arquivo com {data}
            
        Returns:
            str: Nome do arquivo formatado
        """
        data_str = self.data_referencia.strftime('%Y%m%d')
        return template.replace('{data}', data_str)
    
    def _verificar_arquivo_existe(self, caminho_completo: str) -> bool:
        """
        Verifica se um arquivo existe no caminho especificado.
        
        Args:
            caminho_completo (str): Caminho completo para o arquivo
            
        Returns:
            bool: True se arquivo existe, False caso contr√°rio
        """
        try:
            # Para desenvolvimento/teste, simular alguns arquivos como existentes
            if self.dry_run or "test" in caminho_completo.lower():
                # Simular que 30% dos arquivos existem para demonstra√ß√£o
                import hashlib
                hash_obj = hashlib.md5(caminho_completo.encode())
                return int(hash_obj.hexdigest(), 16) % 10 < 3
            
            return os.path.exists(caminho_completo)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao verificar arquivo {caminho_completo}: {e}")
            return False
    
    def verificar_conciliacoes(self) -> Dict[str, Any]:
        """
        Executa a verifica√ß√£o de todas as concilia√ß√µes configuradas.
        
        Returns:
            dict: Resultados da verifica√ß√£o com estat√≠sticas e detalhes
        """
        logger.info("üîç Iniciando verifica√ß√£o de concilia√ß√µes...")
        
        resultados = []
        total_arquivos = 0
        arquivos_encontrados = 0
        
        # Processar cada categoria de concilia√ß√£o
        for categoria, config_categoria in self.config.get('conciliacoes', {}).items():
            logger.info(f"üìÇ Processando categoria: {categoria}")
            
            for arquivo_config in config_categoria.get('arquivos', []):
                total_arquivos += 1
                
                # Formatar nome do arquivo com data
                nome_arquivo = self._formatar_nome_arquivo(arquivo_config['nome'])
                caminho_completo = os.path.join(arquivo_config['caminho'], nome_arquivo)
                
                # Verificar exist√™ncia
                existe = self._verificar_arquivo_existe(caminho_completo)
                
                if existe:
                    arquivos_encontrados += 1
                    logger.info(f"‚úÖ Encontrado: {nome_arquivo}")
                else:
                    criticidade = arquivo_config.get('criticidade', 'media')
                    if criticidade in ['critica', 'alta']:
                        logger.warning(f"üö® FALTANDO ({criticidade.upper()}): {nome_arquivo}")
                    else:
                        logger.info(f"‚ö†Ô∏è Faltando ({criticidade}): {nome_arquivo}")
                
                # Adicionar aos resultados
                resultado_arquivo = {
                    'nome_arquivo': nome_arquivo,
                    'caminho_completo': caminho_completo,
                    'existe': existe,
                    'criticidade': arquivo_config.get('criticidade', 'media'),
                    'categoria': categoria,
                    'descricao': arquivo_config.get('descricao', ''),
                    'verificado_em': datetime.now().isoformat()
                }
                
                resultados.append(resultado_arquivo)
        
        # Compilar estat√≠sticas finais
        arquivos_faltando = total_arquivos - arquivos_encontrados
        taxa_sucesso = (arquivos_encontrados / total_arquivos * 100) if total_arquivos > 0 else 0
        
        resultado_final = {
            'timestamp_execucao': datetime.now().isoformat(),
            'data_referencia': self.data_referencia.strftime('%Y-%m-%d'),
            'total_arquivos': total_arquivos,
            'arquivos_encontrados': arquivos_encontrados,
            'arquivos_faltando': arquivos_faltando,
            'taxa_sucesso': round(taxa_sucesso, 1),
            'resultados': resultados,
            'problemas_criticos': [
                r for r in resultados 
                if not r['existe'] and r['criticidade'] in ['critica', 'alta']
            ],
            'configuracao_utilizada': {
                'dry_run': self.dry_run,
                'total_categorias': len(self.config.get('conciliacoes', {}))
            }
        }
        
        # Log do resumo
        logger.info(f"üìä RESUMO DA VERIFICA√á√ÉO:")
        logger.info(f"   üìÅ Total de arquivos: {total_arquivos}")
        logger.info(f"   ‚úÖ Encontrados: {arquivos_encontrados}")
        logger.info(f"   ‚ùå Faltando: {arquivos_faltando}")
        logger.info(f"   üìà Taxa de sucesso: {taxa_sucesso:.1f}%")
        
        if resultado_final['problemas_criticos']:
            logger.warning(f"üö® {len(resultado_final['problemas_criticos'])} problema(s) cr√≠tico(s) detectado(s)!")
        
        return resultado_final
    
    def gerar_relatorio_json(self, dados: Dict[str, Any], arquivo_saida: str = "resultado_conciliacao.json") -> None:
        """
        Gera relat√≥rio em formato JSON.
        
        Args:
            dados (dict): Dados da verifica√ß√£o
            arquivo_saida (str): Nome do arquivo de sa√≠da
        """
        if self.dry_run:
            logger.info(f"üîç [DRY RUN] Geraria arquivo JSON: {arquivo_saida}")
            return
        
        try:
            with open(arquivo_saida, 'w', encoding='utf-8') as f:
                json.dump(dados, f, ensure_ascii=False, indent=2)
            logger.info(f"üìÑ Relat√≥rio JSON gerado: {arquivo_saida}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio JSON: {e}")
            raise
    
    def gerar_relatorio_html(self, dados: Dict[str, Any], arquivo_saida: str = "relatorio_conciliacao.html") -> None:
        """
        Gera relat√≥rio em formato HTML.
        
        Args:
            dados (dict): Dados da verifica√ß√£o
            arquivo_saida (str): Nome do arquivo de sa√≠da
        """
        if self.dry_run:
            logger.info(f"üîç [DRY RUN] Geraria arquivo HTML: {arquivo_saida}")
            return
        
        # Agrupar resultados por categoria
        categorias = {}
        for resultado in dados['resultados']:
            categoria = resultado['categoria']
            if categoria not in categorias:
                categorias[categoria] = []
            categorias[categoria].append(resultado)
        
        # Template HTML
        html_content = f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relat√≥rio de Concilia√ß√µes - Galapagos DTVM</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f7fa; }}
        .container {{ max-width: 1200px; margin: 0 auto; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; margin-bottom: 30px; text-align: center; }}
        .header h1 {{ margin: 0; font-size: 2.5em; }}
        .header p {{ margin: 10px 0 0 0; opacity: 0.9; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .stat-card {{ background: white; padding: 25px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); text-align: center; }}
        .stat-number {{ font-size: 2.5em; font-weight: bold; margin-bottom: 10px; }}
        .stat-label {{ color: #666; font-size: 1.1em; }}
        .success {{ color: #27ae60; }}
        .warning {{ color: #f39c12; }}
        .error {{ color: #e74c3c; }}
        .info {{ color: #3498db; }}
        .category {{ background: white; margin-bottom: 25px; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }}
        .category-header {{ background: #34495e; color: white; padding: 20px; font-size: 1.3em; font-weight: bold; }}
        .file-item {{ padding: 20px; border-bottom: 1px solid #ecf0f1; display: flex; justify-content: between; align-items: center; }}
        .file-item:last-child {{ border-bottom: none; }}
        .file-info {{ flex: 1; }}
        .file-name {{ font-weight: bold; margin-bottom: 5px; }}
        .file-path {{ color: #7f8c8d; font-size: 0.9em; font-family: monospace; }}
        .file-desc {{ color: #666; margin-top: 5px; }}
        .status-badge {{ padding: 8px 16px; border-radius: 20px; font-weight: bold; font-size: 0.9em; }}
        .status-found {{ background: #d5f4e6; color: #27ae60; }}
        .status-missing {{ background: #fadbd8; color: #e74c3c; }}
        .criticality {{ margin-left: 10px; padding: 4px 8px; border-radius: 4px; font-size: 0.8em; font-weight: bold; }}
        .crit-critica {{ background: #e74c3c; color: white; }}
        .crit-alta {{ background: #f39c12; color: white; }}
        .crit-media {{ background: #95a5a6; color: white; }}
        .footer {{ text-align: center; margin-top: 40px; color: #7f8c8d; }}
        .alert {{ background: #fadbd8; border: 1px solid #e74c3c; color: #c0392b; padding: 20px; border-radius: 10px; margin-bottom: 30px; }}
        .alert h3 {{ margin-top: 0; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä Relat√≥rio de Concilia√ß√µes</h1>
            <p>Galapagos DTVM - {datetime.fromisoformat(dados['timestamp_execucao']).strftime('%d/%m/%Y √†s %H:%M:%S')}</p>
        </div>
        
        {f'''<div class="alert">
            <h3>üö® Problemas Cr√≠ticos Detectados</h3>
            <p>{len(dados['problemas_criticos'])} arquivo(s) cr√≠tico(s) n√£o encontrado(s). A√ß√£o imediata necess√°ria.</p>
        </div>''' if dados['problemas_criticos'] else ''}
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number info">{dados['total_arquivos']}</div>
                <div class="stat-label">Total de Arquivos</div>
            </div>
            <div class="stat-card">
                <div class="stat-number success">{dados['arquivos_encontrados']}</div>
                <div class="stat-label">Encontrados</div>
            </div>
            <div class="stat-card">
                <div class="stat-number error">{dados['arquivos_faltando']}</div>
                <div class="stat-label">Faltando</div>
            </div>
            <div class="stat-card">
                <div class="stat-number {'success' if dados['taxa_sucesso'] >= 90 else 'warning' if dados['taxa_sucesso'] >= 70 else 'error'}">{dados['taxa_sucesso']}%</div>
                <div class="stat-label">Taxa de Sucesso</div>
            </div>
        </div>
"""
        
        # Adicionar se√ß√µes por categoria
        for categoria, arquivos in categorias.items():
            categoria_titulo = categoria.replace('_', ' ').title()
            html_content += f"""
        <div class="category">
            <div class="category-header">üìÅ {categoria_titulo}</div>
"""
            
            for arquivo in arquivos:
                status_class = "status-found" if arquivo['existe'] else "status-missing"
                status_text = "Encontrado" if arquivo['existe'] else "N√£o Encontrado"
                crit_class = f"crit-{arquivo['criticidade']}"
                
                html_content += f"""
            <div class="file-item">
                <div class="file-info">
                    <div class="file-name">{arquivo['nome_arquivo']}</div>
                    <div class="file-path">{arquivo['caminho_completo']}</div>
                    <div class="file-desc">{arquivo['descricao']}</div>
                </div>
                <div>
                    <span class="status-badge {status_class}">{status_text}</span>
                    <span class="criticality {crit_class}">{arquivo['criticidade'].upper()}</span>
                </div>
            </div>
"""
            
            html_content += "        </div>\n"
        
        # Finalizar HTML
        html_content += f"""
        <div class="footer">
            <p>Sistema Automatizado de Concilia√ß√µes - Galapagos DTVM</p>
            <p>√öltima execu√ß√£o: {datetime.fromisoformat(dados['timestamp_execucao']).strftime('%d/%m/%Y √†s %H:%M:%S')}</p>
            <p>Data de refer√™ncia: {dados['data_referencia']}</p>
        </div>
    </div>
</body>
</html>"""
        
        try:
            with open(arquivo_saida, 'w', encoding='utf-8') as f:
                f.write(html_content)
            logger.info(f"üìÑ Relat√≥rio HTML gerado: {arquivo_saida}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio HTML: {e}")
            raise


def main():
    """Fun√ß√£o principal do script."""
    parser = argparse.ArgumentParser(
        description="Sistema de Verifica√ß√£o de Concilia√ß√µes Cont√°beis - Galapagos DTVM",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python conciliacao_checker.py                    # Verifica√ß√£o para data atual
  python conciliacao_checker.py --data 2025-06-07  # Data espec√≠fica
  python conciliacao_checker.py --verbose          # Logs detalhados
  python conciliacao_checker.py --dry-run          # Simula√ß√£o sem gerar arquivos
        """
    )
    
    parser.add_argument(
        '--data', 
        type=str, 
        help='Data de refer√™ncia no formato YYYY-MM-DD (padr√£o: hoje)'
    )
    parser.add_argument(
        '--verbose', 
        action='store_true', 
        help='Ativar logs detalhados (DEBUG)'
    )
    parser.add_argument(
        '--dry-run', 
        action='store_true', 
        help='Executar em modo simula√ß√£o (n√£o gera arquivos)'
    )
    parser.add_argument(
        '--config', 
        type=str, 
        default='config.json',
        help='Caminho para arquivo de configura√ß√£o (padr√£o: config.json)'
    )
    
    args = parser.parse_args()
    
    # Configurar n√≠vel de log
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("üîç Modo verbose ativado")
    
    try:
        # Inicializar verificador
        checker = ConciliacaoChecker(config_path=args.config, dry_run=args.dry_run)
        
        # Definir data de refer√™ncia
        checker.definir_data_referencia(args.data)
        
        # Executar verifica√ß√£o
        resultados = checker.verificar_conciliacoes()
        
        # Gerar relat√≥rios
        checker.gerar_relatorio_json(resultados)
        checker.gerar_relatorio_html(resultados)
        
        # Status de sa√≠da baseado nos resultados
        if resultados['problemas_criticos']:
            logger.warning("‚ö†Ô∏è Execu√ß√£o conclu√≠da com problemas cr√≠ticos")
            sys.exit(1)
        else:
            logger.info("‚úÖ Execu√ß√£o conclu√≠da com sucesso")
            sys.exit(0)
            
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

